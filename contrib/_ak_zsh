#compdef ak

autoload -U is-at-least

_ak() {
	ACTIONS=()
    while read -r line; do
        filename=$(basename "$line" .json)
        ACTIONS+=("$filename")
    done < <(find ~/.config/qapi/projects -type f)

	PROJECTS=()
	while read -r line; do
        filename=$(basename "$line")
        PROJECTS+=("$filename")
    done < <(find ~/.config/qapi/projects/* -type d)

    TEST_SUITES=()
    while read -r line; do
        filename=$(basename "$line" .json)
        TEST_SUITES+=("$filename")
    done < <(find ~/.config/qapi/test-suites/* -type d)

    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_ak_commands" \
"*::: :->ak" \
&& ret=0
    case $state in
    (ak)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:ak-command-$line[1]:"
        case $line[1] in
            (project)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_ak__project_commands" \
"*::: :->project" \
&& ret=0

    case $state in
    (project)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:ak-project-command-$line[1]:"
        case $line[1] in
            (new)
_arguments "${_arguments_options[@]}" \
'-u+[prod url for this project]:URL: ' \
'--url=[prod url for this project]:URL: ' \
'*-c+[Possible configuration for this project]:CONF: ' \
'*--conf=[Possible configuration for this project]:CONF: ' \
'--from-openapi=[url or path to openapi file]:FROM_OPENAPI:_files' \
'--from-postman=[url or path to postman collection file]:FROM_POSTMAN:_files' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':name -- project name unique:' \
&& ret=0
;;
(rm-action)
_arguments "${_arguments_options[@]}" \
'-n+[name of the action to remove]:NAME: ' \
'--name=[name of the action to remove]:NAME: ' \
'-p+[name of the project to remove the action from]:PROJECT:(($PROJECTS))' \
'--project=[name of the project to remove the action from]:PROJECT:(($PROJECTS))' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(info)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':name -- project name:($PROJECTS)' \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(ui)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_ak__project__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:ak-project-help-command-$line[1]:"
        case $line[1] in
            (new)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(rm-action)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(info)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(ui)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(run)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_ak__run_commands" \
"*::: :->run" \
&& ret=0

    case $state in
    (run)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:ak-run-command-$line[1]:"
        case $line[1] in
            (get)
_arguments "${_arguments_options[@]}" \
'--project=[project on which the action belongs]:PROJECT:(($PROJECTS))' \
'-u+[]:URL: ' \
'--url=[]:URL: ' \
'--verb=[]:VERB:(GET POST PUT DELETE)' \
'*-p+[path params separated by a ,]:PATH_PARAMS: ' \
'*--path-params=[path params separated by a ,]:PATH_PARAMS: ' \
'*-q+[query params separated by a ,]:QUERY_PARAMS: ' \
'*--query-params=[query params separated by a ,]:QUERY_PARAMS: ' \
'*-b+[body of the action]:BODY: ' \
'*--body=[body of the action]:BODY: ' \
'*-H+[multipart form data]:HEADER: ' \
'*--header=[multipart form data]:HEADER: ' \
'*-e+[extract path of the response]:EXTRACT_PATH: ' \
'*--extract-path=[extract path of the response]:EXTRACT_PATH: ' \
'*-c+[chain with another action]:CHAIN: ' \
'*--chain=[chain with another action]:CHAIN: ' \
'*-E+[add expectation]:EXPECT: ' \
'*--expect=[add expectation]:EXPECT: ' \
'--save-to-ts=[save command line as test suite step]:SAVE_TO_TS: ' \
'--save=[save command line as flow]:SAVE: ' \
'-t+[timeout on request]:TIMEOUT: ' \
'--timeout=[timeout on request]:TIMEOUT: ' \
'--form-data[url encoded body]' \
'--url-encoded[optional headers]' \
'--clipboard[save result in the clipboard]' \
'--force[force action rerun even if its extracted value exists in current context]' \
'--quiet[print the output of the command]' \
'--grep[grep the output of the command]' \
'-k[do not check ssl certificate]' \
'--insecure[do not check ssl certificate]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
'::name -- action name optional:(($ACTIONS))' \
&& ret=0
;;
(post)
_arguments "${_arguments_options[@]}" \
'--project=[project on which the action belongs]:PROJECT:(($PROJECTS))' \
'-u+[]:URL: ' \
'--url=[]:URL: ' \
'--verb=[]:VERB:(GET POST PUT DELETE)' \
'*-p+[path params separated by a ,]:PATH_PARAMS: ' \
'*--path-params=[path params separated by a ,]:PATH_PARAMS: ' \
'*-q+[query params separated by a ,]:QUERY_PARAMS: ' \
'*--query-params=[query params separated by a ,]:QUERY_PARAMS: ' \
'*-b+[body of the action]:BODY: ' \
'*--body=[body of the action]:BODY: ' \
'*-H+[multipart form data]:HEADER: ' \
'*--header=[multipart form data]:HEADER: ' \
'*-e+[extract path of the response]:EXTRACT_PATH: ' \
'*--extract-path=[extract path of the response]:EXTRACT_PATH: ' \
'*-c+[chain with another action]:CHAIN: ' \
'*--chain=[chain with another action]:CHAIN: ' \
'*-E+[add expectation]:EXPECT: ' \
'*--expect=[add expectation]:EXPECT: ' \
'--save-to-ts=[save command line as test suite step]:SAVE_TO_TS: ' \
'--save=[save command line as flow]:SAVE: ' \
'-t+[timeout on request]:TIMEOUT: ' \
'--timeout=[timeout on request]:TIMEOUT: ' \
'--form-data[url encoded body]' \
'--url-encoded[optional headers]' \
'--clipboard[save result in the clipboard]' \
'--force[force action rerun even if its extracted value exists in current context]' \
'--quiet[print the output of the command]' \
'--grep[grep the output of the command]' \
'-k[do not check ssl certificate]' \
'--insecure[do not check ssl certificate]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
'::name -- action name optional:(($ACTIONS))' \
&& ret=0
;;
(put)
_arguments "${_arguments_options[@]}" \
'--project=[project on which the action belongs]:PROJECT:(($PROJECTS))' \
'-u+[]:URL: ' \
'--url=[]:URL: ' \
'--verb=[]:VERB:(GET POST PUT DELETE)' \
'*-p+[path params separated by a ,]:PATH_PARAMS: ' \
'*--path-params=[path params separated by a ,]:PATH_PARAMS: ' \
'*-q+[query params separated by a ,]:QUERY_PARAMS: ' \
'*--query-params=[query params separated by a ,]:QUERY_PARAMS: ' \
'*-b+[body of the action]:BODY: ' \
'*--body=[body of the action]:BODY: ' \
'*-H+[multipart form data]:HEADER: ' \
'*--header=[multipart form data]:HEADER: ' \
'*-e+[extract path of the response]:EXTRACT_PATH: ' \
'*--extract-path=[extract path of the response]:EXTRACT_PATH: ' \
'*-c+[chain with another action]:CHAIN: ' \
'*--chain=[chain with another action]:CHAIN: ' \
'*-E+[add expectation]:EXPECT: ' \
'*--expect=[add expectation]:EXPECT: ' \
'--save-to-ts=[save command line as test suite step]:SAVE_TO_TS: ' \
'--save=[save command line as flow]:SAVE: ' \
'-t+[timeout on request]:TIMEOUT: ' \
'--timeout=[timeout on request]:TIMEOUT: ' \
'--form-data[url encoded body]' \
'--url-encoded[optional headers]' \
'--clipboard[save result in the clipboard]' \
'--force[force action rerun even if its extracted value exists in current context]' \
'--quiet[print the output of the command]' \
'--grep[grep the output of the command]' \
'-k[do not check ssl certificate]' \
'--insecure[do not check ssl certificate]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
'::name -- action name optional:(($ACTIONS))' \
&& ret=0
;;
(delete)
_arguments "${_arguments_options[@]}" \
'--project=[project on which the action belongs]:PROJECT:(($PROJECTS))' \
'-u+[]:URL: ' \
'--url=[]:URL: ' \
'--verb=[]:VERB:(GET POST PUT DELETE)' \
'*-p+[path params separated by a ,]:PATH_PARAMS: ' \
'*--path-params=[path params separated by a ,]:PATH_PARAMS: ' \
'*-q+[query params separated by a ,]:QUERY_PARAMS: ' \
'*--query-params=[query params separated by a ,]:QUERY_PARAMS: ' \
'*-b+[body of the action]:BODY: ' \
'*--body=[body of the action]:BODY: ' \
'*-H+[multipart form data]:HEADER: ' \
'*--header=[multipart form data]:HEADER: ' \
'*-e+[extract path of the response]:EXTRACT_PATH: ' \
'*--extract-path=[extract path of the response]:EXTRACT_PATH: ' \
'*-c+[chain with another action]:CHAIN: ' \
'*--chain=[chain with another action]:CHAIN: ' \
'*-E+[add expectation]:EXPECT: ' \
'*--expect=[add expectation]:EXPECT: ' \
'--save-to-ts=[save command line as test suite step]:SAVE_TO_TS: ' \
'--save=[save command line as flow]:SAVE: ' \
'-t+[timeout on request]:TIMEOUT: ' \
'--timeout=[timeout on request]:TIMEOUT: ' \
'--form-data[url encoded body]' \
'--url-encoded[optional headers]' \
'--clipboard[save result in the clipboard]' \
'--force[force action rerun even if its extracted value exists in current context]' \
'--quiet[print the output of the command]' \
'--grep[grep the output of the command]' \
'-k[do not check ssl certificate]' \
'--insecure[do not check ssl certificate]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
'::name -- action name optional:(($ACTIONS))' \
&& ret=0
;;
(action)
_arguments "${_arguments_options[@]}" \
'--project=[project on which the action belongs]:PROJECT:(($PROJECTS))' \
'-u+[target url]:URL: ' \
'--url=[target url]:URL: ' \
'--verb=[http method]:VERB:(GET POST PUT DELETE)' \
'*-p+[path params separated by a ,]:PATH_PARAMS: ' \
'*--path-params=[path params separated by a ,]:PATH_PARAMS: ' \
'*-q+[query params separated by a ,]:QUERY_PARAMS: ' \
'*--query-params=[query params separated by a ,]:QUERY_PARAMS: ' \
'*-b+[body of the action]:BODY: ' \
'*--body=[body of the action]:BODY: ' \
'*-H+[multipart form data]:HEADER: ' \
'*--header=[multipart form data]:HEADER: ' \
'*-e+[extract path of the response]:EXTRACT_PATH: ' \
'*--extract-path=[extract path of the response]:EXTRACT_PATH: ' \
'*-c+[chain with another action]:CHAIN: ' \
'*--chain=[chain with another action]:CHAIN: ' \
'*-E+[add expectation]:EXPECT: ' \
'*--expect=[add expectation]:EXPECT: ' \
'--save-to-ts=[save command line as test suite step]:SAVE_TO_TS: ' \
'--save=[save command line as flow]:SAVE: ' \
'-t+[timeout on request]:TIMEOUT: ' \
'--timeout=[timeout on request]:TIMEOUT: ' \
'--form-data[url encoded body]' \
'--url-encoded[optional headers]' \
'--clipboard[save result in the clipboard]' \
'--force[force action rerun even if its extracted value exists in current context]' \
'--quiet[print the output of the command]' \
'--grep[grep the output of the command]' \
'-k[do not check ssl certificate]' \
'--insecure[do not check ssl certificate]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
'::name -- action name optional:(($ACTIONS))' \
&& ret=0
;;
(test-suite)
_arguments "${_arguments_options[@]}" \
'-c+[concurrency value]:CONCURRENCY: ' \
'--concurrency=[concurrency value]:CONCURRENCY: ' \
'-d[Debug output]' \
'--debug[Debug output]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':name -- Test suite name:(($TEST_SUITES))' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_ak__run__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:ak-run-help-command-$line[1]:"
        case $line[1] in
            (get)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(post)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(put)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(delete)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(action)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(test-suite)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(test-suite)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_ak__test-suite_commands" \
"*::: :->test-suite" \
&& ret=0

    case $state in
    (test-suite)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:ak-test-suite-command-$line[1]:"
        case $line[1] in
            (new)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':name -- Test suite name:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_ak__test-suite__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:ak-test-suite-help-command-$line[1]:"
        case $line[1] in
            (new)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(history)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_ak__history_commands" \
"*::: :->history" \
&& ret=0

    case $state in
    (history)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:ak-history-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(ui)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_ak__history__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:ak-history-help-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(ui)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(print-complete-script)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':shell:(bash elvish fish powershell zsh)' \
&& ret=0
;;
(sql)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
':q:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_ak__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:ak-help-command-$line[1]:"
        case $line[1] in
            (project)
_arguments "${_arguments_options[@]}" \
":: :_ak__help__project_commands" \
"*::: :->project" \
&& ret=0

    case $state in
    (project)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:ak-help-project-command-$line[1]:"
        case $line[1] in
            (new)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(rm-action)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(info)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(ui)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(run)
_arguments "${_arguments_options[@]}" \
":: :_ak__help__run_commands" \
"*::: :->run" \
&& ret=0

    case $state in
    (run)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:ak-help-run-command-$line[1]:"
        case $line[1] in
            (get)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(post)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(put)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(delete)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(action)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(test-suite)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(test-suite)
_arguments "${_arguments_options[@]}" \
":: :_ak__help__test-suite_commands" \
"*::: :->test-suite" \
&& ret=0

    case $state in
    (test-suite)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:ak-help-test-suite-command-$line[1]:"
        case $line[1] in
            (new)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(history)
_arguments "${_arguments_options[@]}" \
":: :_ak__help__history_commands" \
"*::: :->history" \
&& ret=0

    case $state in
    (history)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:ak-help-history-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(ui)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(print-complete-script)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(sql)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_ak_commands] )) ||
_ak_commands() {
    local commands; commands=(
'project:Create or update a new project with specified parameters' \
'run:Run a project action, flow or test suite' \
'test-suite:Test suite information' \
'history:List all history call' \
'print-complete-script:Print the completion script in stdout' \
'sql:Exec sql command (for debug purpose)' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'ak commands' commands "$@"
}
(( $+functions[_ak__help__run__action_commands] )) ||
_ak__help__run__action_commands() {
    local commands; commands=()
    _describe -t commands 'ak help run action commands' commands "$@"
}
(( $+functions[_ak__run__action_commands] )) ||
_ak__run__action_commands() {
    local commands; commands=()
    _describe -t commands 'ak run action commands' commands "$@"
}
(( $+functions[_ak__run__help__action_commands] )) ||
_ak__run__help__action_commands() {
    local commands; commands=()
    _describe -t commands 'ak run help action commands' commands "$@"
}
(( $+functions[_ak__help__run__delete_commands] )) ||
_ak__help__run__delete_commands() {
    local commands; commands=()
    _describe -t commands 'ak help run delete commands' commands "$@"
}
(( $+functions[_ak__run__delete_commands] )) ||
_ak__run__delete_commands() {
    local commands; commands=()
    _describe -t commands 'ak run delete commands' commands "$@"
}
(( $+functions[_ak__run__help__delete_commands] )) ||
_ak__run__help__delete_commands() {
    local commands; commands=()
    _describe -t commands 'ak run help delete commands' commands "$@"
}
(( $+functions[_ak__help__run__get_commands] )) ||
_ak__help__run__get_commands() {
    local commands; commands=()
    _describe -t commands 'ak help run get commands' commands "$@"
}
(( $+functions[_ak__run__get_commands] )) ||
_ak__run__get_commands() {
    local commands; commands=()
    _describe -t commands 'ak run get commands' commands "$@"
}
(( $+functions[_ak__run__help__get_commands] )) ||
_ak__run__help__get_commands() {
    local commands; commands=()
    _describe -t commands 'ak run help get commands' commands "$@"
}
(( $+functions[_ak__help_commands] )) ||
_ak__help_commands() {
    local commands; commands=(
'project:Create or update a new project with specified parameters' \
'run:Run a project action, flow or test suite' \
'test-suite:Test suite information' \
'history:List all history call' \
'print-complete-script:Print the completion script in stdout' \
'sql:Exec sql command (for debug purpose)' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'ak help commands' commands "$@"
}
(( $+functions[_ak__help__help_commands] )) ||
_ak__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'ak help help commands' commands "$@"
}
(( $+functions[_ak__history__help_commands] )) ||
_ak__history__help_commands() {
    local commands; commands=(
'list:Show history' \
'ui:Run history ui' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'ak history help commands' commands "$@"
}
(( $+functions[_ak__history__help__help_commands] )) ||
_ak__history__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'ak history help help commands' commands "$@"
}
(( $+functions[_ak__project__help_commands] )) ||
_ak__project__help_commands() {
    local commands; commands=(
'new:Create a new project' \
'rm-action:Remove action from the specified project' \
'info:Get information about a project' \
'list:List projects' \
'ui:Run project ui' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'ak project help commands' commands "$@"
}
(( $+functions[_ak__project__help__help_commands] )) ||
_ak__project__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'ak project help help commands' commands "$@"
}
(( $+functions[_ak__run__help_commands] )) ||
_ak__run__help_commands() {
    local commands; commands=(
'get:override verb to GET' \
'post:override verb to POST' \
'put:override verb to PUT' \
'delete:override verb to PUT' \
'action:Run an action' \
'test-suite:Run a saved test suite' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'ak run help commands' commands "$@"
}
(( $+functions[_ak__run__help__help_commands] )) ||
_ak__run__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'ak run help help commands' commands "$@"
}
(( $+functions[_ak__test-suite__help_commands] )) ||
_ak__test-suite__help_commands() {
    local commands; commands=(
'new:Run an action' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'ak test-suite help commands' commands "$@"
}
(( $+functions[_ak__test-suite__help__help_commands] )) ||
_ak__test-suite__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'ak test-suite help help commands' commands "$@"
}
(( $+functions[_ak__help__history_commands] )) ||
_ak__help__history_commands() {
    local commands; commands=(
'list:Show history' \
'ui:Run history ui' \
    )
    _describe -t commands 'ak help history commands' commands "$@"
}
(( $+functions[_ak__history_commands] )) ||
_ak__history_commands() {
    local commands; commands=(
'list:Show history' \
'ui:Run history ui' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'ak history commands' commands "$@"
}
(( $+functions[_ak__help__project__info_commands] )) ||
_ak__help__project__info_commands() {
    local commands; commands=()
    _describe -t commands 'ak help project info commands' commands "$@"
}
(( $+functions[_ak__project__help__info_commands] )) ||
_ak__project__help__info_commands() {
    local commands; commands=()
    _describe -t commands 'ak project help info commands' commands "$@"
}
(( $+functions[_ak__project__info_commands] )) ||
_ak__project__info_commands() {
    local commands; commands=()
    _describe -t commands 'ak project info commands' commands "$@"
}
(( $+functions[_ak__help__history__list_commands] )) ||
_ak__help__history__list_commands() {
    local commands; commands=()
    _describe -t commands 'ak help history list commands' commands "$@"
}
(( $+functions[_ak__help__project__list_commands] )) ||
_ak__help__project__list_commands() {
    local commands; commands=()
    _describe -t commands 'ak help project list commands' commands "$@"
}
(( $+functions[_ak__history__help__list_commands] )) ||
_ak__history__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'ak history help list commands' commands "$@"
}
(( $+functions[_ak__history__list_commands] )) ||
_ak__history__list_commands() {
    local commands; commands=()
    _describe -t commands 'ak history list commands' commands "$@"
}
(( $+functions[_ak__project__help__list_commands] )) ||
_ak__project__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'ak project help list commands' commands "$@"
}
(( $+functions[_ak__project__list_commands] )) ||
_ak__project__list_commands() {
    local commands; commands=()
    _describe -t commands 'ak project list commands' commands "$@"
}
(( $+functions[_ak__help__project__new_commands] )) ||
_ak__help__project__new_commands() {
    local commands; commands=()
    _describe -t commands 'ak help project new commands' commands "$@"
}
(( $+functions[_ak__help__test-suite__new_commands] )) ||
_ak__help__test-suite__new_commands() {
    local commands; commands=()
    _describe -t commands 'ak help test-suite new commands' commands "$@"
}
(( $+functions[_ak__project__help__new_commands] )) ||
_ak__project__help__new_commands() {
    local commands; commands=()
    _describe -t commands 'ak project help new commands' commands "$@"
}
(( $+functions[_ak__project__new_commands] )) ||
_ak__project__new_commands() {
    local commands; commands=()
    _describe -t commands 'ak project new commands' commands "$@"
}
(( $+functions[_ak__test-suite__help__new_commands] )) ||
_ak__test-suite__help__new_commands() {
    local commands; commands=()
    _describe -t commands 'ak test-suite help new commands' commands "$@"
}
(( $+functions[_ak__test-suite__new_commands] )) ||
_ak__test-suite__new_commands() {
    local commands; commands=()
    _describe -t commands 'ak test-suite new commands' commands "$@"
}
(( $+functions[_ak__help__run__post_commands] )) ||
_ak__help__run__post_commands() {
    local commands; commands=()
    _describe -t commands 'ak help run post commands' commands "$@"
}
(( $+functions[_ak__run__help__post_commands] )) ||
_ak__run__help__post_commands() {
    local commands; commands=()
    _describe -t commands 'ak run help post commands' commands "$@"
}
(( $+functions[_ak__run__post_commands] )) ||
_ak__run__post_commands() {
    local commands; commands=()
    _describe -t commands 'ak run post commands' commands "$@"
}
(( $+functions[_ak__help__print-complete-script_commands] )) ||
_ak__help__print-complete-script_commands() {
    local commands; commands=()
    _describe -t commands 'ak help print-complete-script commands' commands "$@"
}
(( $+functions[_ak__print-complete-script_commands] )) ||
_ak__print-complete-script_commands() {
    local commands; commands=()
    _describe -t commands 'ak print-complete-script commands' commands "$@"
}
(( $+functions[_ak__help__project_commands] )) ||
_ak__help__project_commands() {
    local commands; commands=(
'new:Create a new project' \
'rm-action:Remove action from the specified project' \
'info:Get information about a project' \
'list:List projects' \
'ui:Run project ui' \
    )
    _describe -t commands 'ak help project commands' commands "$@"
}
(( $+functions[_ak__project_commands] )) ||
_ak__project_commands() {
    local commands; commands=(
'new:Create a new project' \
'rm-action:Remove action from the specified project' \
'info:Get information about a project' \
'list:List projects' \
'ui:Run project ui' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'ak project commands' commands "$@"
}
(( $+functions[_ak__help__run__put_commands] )) ||
_ak__help__run__put_commands() {
    local commands; commands=()
    _describe -t commands 'ak help run put commands' commands "$@"
}
(( $+functions[_ak__run__help__put_commands] )) ||
_ak__run__help__put_commands() {
    local commands; commands=()
    _describe -t commands 'ak run help put commands' commands "$@"
}
(( $+functions[_ak__run__put_commands] )) ||
_ak__run__put_commands() {
    local commands; commands=()
    _describe -t commands 'ak run put commands' commands "$@"
}
(( $+functions[_ak__help__project__rm-action_commands] )) ||
_ak__help__project__rm-action_commands() {
    local commands; commands=()
    _describe -t commands 'ak help project rm-action commands' commands "$@"
}
(( $+functions[_ak__project__help__rm-action_commands] )) ||
_ak__project__help__rm-action_commands() {
    local commands; commands=()
    _describe -t commands 'ak project help rm-action commands' commands "$@"
}
(( $+functions[_ak__project__rm-action_commands] )) ||
_ak__project__rm-action_commands() {
    local commands; commands=()
    _describe -t commands 'ak project rm-action commands' commands "$@"
}
(( $+functions[_ak__help__run_commands] )) ||
_ak__help__run_commands() {
    local commands; commands=(
'get:override verb to GET' \
'post:override verb to POST' \
'put:override verb to PUT' \
'delete:override verb to PUT' \
'action:Run an action' \
'test-suite:Run a saved test suite' \
    )
    _describe -t commands 'ak help run commands' commands "$@"
}
(( $+functions[_ak__run_commands] )) ||
_ak__run_commands() {
    local commands; commands=(
'get:override verb to GET' \
'post:override verb to POST' \
'put:override verb to PUT' \
'delete:override verb to PUT' \
'action:Run an action' \
'test-suite:Run a saved test suite' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'ak run commands' commands "$@"
}
(( $+functions[_ak__help__sql_commands] )) ||
_ak__help__sql_commands() {
    local commands; commands=()
    _describe -t commands 'ak help sql commands' commands "$@"
}
(( $+functions[_ak__sql_commands] )) ||
_ak__sql_commands() {
    local commands; commands=()
    _describe -t commands 'ak sql commands' commands "$@"
}
(( $+functions[_ak__help__run__test-suite_commands] )) ||
_ak__help__run__test-suite_commands() {
    local commands; commands=()
    _describe -t commands 'ak help run test-suite commands' commands "$@"
}
(( $+functions[_ak__help__test-suite_commands] )) ||
_ak__help__test-suite_commands() {
    local commands; commands=(
'new:Run an action' \
    )
    _describe -t commands 'ak help test-suite commands' commands "$@"
}
(( $+functions[_ak__run__help__test-suite_commands] )) ||
_ak__run__help__test-suite_commands() {
    local commands; commands=()
    _describe -t commands 'ak run help test-suite commands' commands "$@"
}
(( $+functions[_ak__run__test-suite_commands] )) ||
_ak__run__test-suite_commands() {
    local commands; commands=()
    _describe -t commands 'ak run test-suite commands' commands "$@"
}
(( $+functions[_ak__test-suite_commands] )) ||
_ak__test-suite_commands() {
    local commands; commands=(
'new:Run an action' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'ak test-suite commands' commands "$@"
}
(( $+functions[_ak__help__history__ui_commands] )) ||
_ak__help__history__ui_commands() {
    local commands; commands=()
    _describe -t commands 'ak help history ui commands' commands "$@"
}
(( $+functions[_ak__help__project__ui_commands] )) ||
_ak__help__project__ui_commands() {
    local commands; commands=()
    _describe -t commands 'ak help project ui commands' commands "$@"
}
(( $+functions[_ak__history__help__ui_commands] )) ||
_ak__history__help__ui_commands() {
    local commands; commands=()
    _describe -t commands 'ak history help ui commands' commands "$@"
}
(( $+functions[_ak__history__ui_commands] )) ||
_ak__history__ui_commands() {
    local commands; commands=()
    _describe -t commands 'ak history ui commands' commands "$@"
}
(( $+functions[_ak__project__help__ui_commands] )) ||
_ak__project__help__ui_commands() {
    local commands; commands=()
    _describe -t commands 'ak project help ui commands' commands "$@"
}
(( $+functions[_ak__project__ui_commands] )) ||
_ak__project__ui_commands() {
    local commands; commands=()
    _describe -t commands 'ak project ui commands' commands "$@"
}

if [ "$funcstack[1]" = "_ak" ]; then
    _ak "$@"
else
    compdef _ak ak
fi
